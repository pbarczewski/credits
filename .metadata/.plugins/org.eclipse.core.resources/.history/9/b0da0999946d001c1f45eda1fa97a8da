package pl.pbarczewski;
import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.jupiter.api.Assertions.assertAll;
import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;

import javax.validation.ConstraintViolation;
import javax.validation.Validation;
import javax.validation.Validator;
import javax.validation.ValidatorFactory;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.annotation.DirtiesContext;
import org.springframework.test.annotation.DirtiesContext.ClassMode;
import org.springframework.test.context.DynamicPropertyRegistry;
import org.springframework.test.context.DynamicPropertySource;
import org.testcontainers.containers.MySQLContainer;
import org.testcontainers.junit.jupiter.Container;
import org.testcontainers.junit.jupiter.Testcontainers;
import pl.pbarczewski.entity.Credit;
import pl.pbarczewski.entity.Customer;
import pl.pbarczewski.entity.Product;
import pl.pbarczewski.repository.CreditRepository;
import pl.pbarczewski.wrapper.Entities;

@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.NONE)
@DirtiesContext(classMode = ClassMode.BEFORE_EACH_TEST_METHOD)
@Testcontainers
class CreditApplicationTests {
	private Credit firstCredit;
	private Product firstProduct;
	private Product secondProduct;
	private Customer firstCustomer;
	private Customer secondCustomer;
	
	@Autowired
	private CreditRepository creditRepository;
	List<Credit> credits = new ArrayList<>();
	private Validator validator;
	
	@BeforeEach
	public void init() {
		firstCredit = new Credit("First");
		firstProduct = new Product("First Product", 100);
		firstProduct.setCreditId(12345);
		secondProduct = new Product("Second Product", 200);
		secondProduct.setCreditId(54321);
		firstCustomer = new Customer("Jan", "Kowalski", "12345678901");
		firstCustomer.setCreditId(12345);
		secondCustomer = new Customer("Anna", "Nowak", "98765432101");
		secondCustomer.setCreditId(54321);
		ValidatorFactory vf = Validation.buildDefaultValidatorFactory();
        this.validator = vf.getValidator();
	}
	
	@Container
	private static MySQLContainer mysqlContainer = new MySQLContainer("mysql:latest");
	
	@DynamicPropertySource
	public static void ovverideProps(DynamicPropertyRegistry registry) {
		registry.add("spring.datasource.url", mysqlContainer::getJdbcUrl);
		registry.add("spring.datasource.username", mysqlContainer::getUsername);
		registry.add("spring.datasource.password", mysqlContainer::getPassword);
	}
	
	@Test
	void credits_with_incorrect_parameter_should_not_pass_validation() {
        Credit credit = new Credit("nNowy");
        Set<ConstraintViolation<Credit>> violations = this.validator.validate(credit);
        assertEquals(violations.size(), 1);
	}  
	
	@Test
	void credits_with_correct_parameter_should_pass_validation() {
        Credit credit = new Credit("nNowy");
        Set<ConstraintViolation<Credit>> violations = this.validator.validate(credit);
        assertEquals(violations.size(), 1);
	}  
	
	@Test
	void exception_should_be_thrown_if_customer_is_null() {
		//given
		firstCredit.setCreditId(12345);
		//when
		//then
		assertThrows
		(IllegalArgumentException.class, 
				()-> firstCredit.completeCredit(null, firstProduct));
	}
	
	@Test
	void exception_should_be_thrown_if_product_is_null() {
		//given
		firstCredit.setCreditId(12345);
		//when
		//then
		assertThrows
		(IllegalArgumentException.class, 
				()-> firstCredit.completeCredit(firstCustomer, null));
	}
	
	@Test
	void no_exception_is_thrown_if_credit_and_product_are_correct() {
		//given
		firstCredit.setCreditId(12345);
		//when
		//then
		 assertDoesNotThrow(()-> firstCredit.completeCredit(firstCustomer, firstProduct));
	}
	
	@Test
	void credit_should_be_created_if_product_and_customer_are_correct() throws Exception {
		//given
		firstCredit.setCreditId(12345);
		//when
		firstCredit.completeCredit(firstCustomer, firstProduct);
		Product product = firstCredit.getProduct();
		Customer customer = firstCredit.getCustomer();
		//then
		assertAll(
				() -> assertEquals("First", firstCredit.getName()),
				() -> assertEquals("Jan", customer.getFirstName()),
				() -> assertEquals("First Product", product.getName())
				);
	}
	
	@Test
	void all_entities_should_have_same_generated_id() throws Exception {
		//given
		Credit credit = new Credit("New");
		Product product = new Product("Product", 100);
		Customer customer = new Customer("Jan", "Kowalski", "12345678901");
		Entities entities = new Entities(credit, product, customer);
		//when
		entities.setId();
		int id = entities.getCredit().getId();
		//then
		assertAll(
				() -> assertEquals(product.getCreditId(), id),
				() -> assertEquals(customer.getCreditId(), id)
				);
	}
}
