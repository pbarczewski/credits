package pl.pbarczewski.controller;
import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.jupiter.api.Assertions.assertAll;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.annotation.DirtiesContext;
import org.springframework.test.annotation.DirtiesContext.ClassMode;
import org.springframework.test.context.DynamicPropertyRegistry;
import org.springframework.test.context.DynamicPropertySource;
import org.testcontainers.containers.MySQLContainer;
import org.testcontainers.junit.jupiter.Container;
import org.testcontainers.junit.jupiter.Testcontainers;
import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;
import org.springframework.boot.test.web.client.TestRestTemplate;
import org.springframework.boot.web.server.LocalServerPort;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import pl.pbarczewski.entity.Credit;
import pl.pbarczewski.entity.Customer;
import pl.pbarczewski.entity.Product;
import pl.pbarczewski.repositories.CustomerRepository;
import pl.pbarczewski.repositories.ProductRepository;
import pl.pbarczewski.repository.CreditRepository;
import pl.pbarczewski.service.CreditService;


@Testcontainers
@DirtiesContext(classMode = ClassMode.BEFORE_EACH_TEST_METHOD)
@SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT)
public class CreditControllerTest {

	private Credit firstCredit;
	private Credit secondCredit;
	private HttpEntity<Object> entity;
	
	@Autowired
	private CreditController creditController;
	
	@Autowired
	private CreditService creditService;

	@Autowired
	private CustomerRepository customerRepository;
	
	@Autowired
	private ProductRepository productRepository;
	
	@Autowired
	private CreditRepository creditRepository;
	
	@BeforeEach
	void init() {
		firstCredit = new Credit("New Credit");
		firstCredit.setCreditId(12345);
		secondCredit = new Credit("Second Credit");
		secondCredit.setCreditId(54321);
		entity = new HttpEntity<Object>(new HttpHeaders());
	}
	
	@LocalServerPort
	private int port;
	
	@Autowired
	private TestRestTemplate restTemplate;
	
	@Container
	private static MySQLContainer mysqlContainer = new MySQLContainer("mysql:latest");
	
	@DynamicPropertySource
	public static void ovverideProps(DynamicPropertyRegistry registry) {
		registry.add("spring.datasource.url", mysqlContainer::getJdbcUrl);
		registry.add("spring.datasource.username", mysqlContainer::getUsername);
		registry.add("spring.datasource.password", mysqlContainer::getPassword);
	}
	
	@Test
	public void should_return_empty_value_if_no_credit_is_added() {
		assertThat(this.restTemplate.getForObject("http://localhost:"+port +"/credits", Credit[].class)).isEmpty();
	}
	
	@Test
	public void httpStatus_should_return_OK_if_url_is_correct() {
		//given
		//when
		ResponseEntity<String> response = this.restTemplate.exchange("http://localhost:"+port +"/credits", HttpMethod.GET, entity , String.class);
		//then
		assertEquals(response.getStatusCode(), HttpStatus.OK);
	}
	
	@Test
	public void httpStatus_should_return_NOT_FOUND_if_url_is_incorrect() {
		//given
		//when
		ResponseEntity<String> response = this.restTemplate.exchange("http://localhost:"+port +"/credit", HttpMethod.GET, entity , String.class);
		//then
		assertEquals(response.getStatusCode(), HttpStatus.NOT_FOUND);
	}
	
	@Test
	public void httpStatus_should_return_METHOD_NOT_ALLOWED_if_http_method_is_PUT() {
		ResponseEntity<String> response = this.restTemplate.exchange("http://localhost:"+port +"/credits", HttpMethod.PUT, entity , String.class);
		assertEquals(response.getStatusCode(), HttpStatus.METHOD_NOT_ALLOWED);
	}
	
	@Test
	public void httpStatus_should_return_METHOD_NOT_ALLOWED_if_http_method_is_DELETE() {
		ResponseEntity<String> response = this.restTemplate.exchange("http://localhost:"+port +"/credits", HttpMethod.DELETE, entity , String.class);
		assertEquals(response.getStatusCode(), HttpStatus.METHOD_NOT_ALLOWED);
	}
	
	@Test
	public void credit_list_should_not_be_empty_if_credits_are_added_to_database() {
		//given
		creditRepository.save(firstCredit);
		creditRepository.save(secondCredit);
		//when
		Credit[] credits = this.restTemplate.getForObject("http://localhost:"+port +"/credits", Credit[].class);
		//then
		assertEquals(credits.length, 2);
	}
	
	@Test
	public void product_list_should_be_empty_if_no_product_is_added12() throws Exception {
		//given
		Customer customer = new Customer("Jan", "Kowalski", "12345678901");
		customer.setCreditId(12345);
		Product product = new Product("First Product", 100);
		product.setCreditId(12345);
		Customer secondCustomer = new Customer("Janina", "Kowalska", "12345678902");
		secondCustomer.setCreditId(54321);
		Product secondProduct = new Product("Second Product", 200);
		secondProduct.setCreditId(54321);

		//when
		customerRepository.save(customer);
		productRepository.save(product);
		customerRepository.save(secondCustomer);
		productRepository.save(secondProduct);
		firstCredit.completeCredit(customer, product);
		secondCredit.completeCredit(secondCustomer, secondProduct);
		creditRepository.save(firstCredit);
		creditRepository.save(secondCredit);
		//when
		Credit[] credits = this.restTemplate.getForObject("http://localhost:"+port +"/credits", Credit[].class);
		assertAll(
				() -> assertEquals(credits[0].getCustomer().getPesel(), "12345678901"),
				() -> assertEquals(credits[0].getName(), "New Credit"),
				() -> assertEquals(credits[0].getProduct().getValue(), 100),
				() -> assertEquals(credits[0].getId(), credits[0].getCustomer().getCreditId()),
				() -> assertEquals(credits[1].getCustomer().getFirstName(), "Janina"),
				() -> assertEquals(credits[1].getProduct().getName(), "Second Product"),
				() -> assertEquals(credits[1].getCustomer().getPesel(), "12345678902"),
				() -> assertEquals(credits[1].getId(), credits[1].getProduct().getCreditId())
				);
	}
}
