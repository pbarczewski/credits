package pl.pbarczewski.controller;
import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.jupiter.api.Assertions.assertAll;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.annotation.DirtiesContext;
import org.springframework.test.annotation.DirtiesContext.ClassMode;
import org.springframework.test.context.DynamicPropertyRegistry;
import org.springframework.test.context.DynamicPropertySource;
import org.testcontainers.containers.MySQLContainer;
import org.testcontainers.junit.jupiter.Container;
import org.testcontainers.junit.jupiter.Testcontainers;
import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;
import org.springframework.boot.test.web.client.TestRestTemplate;
import org.springframework.boot.web.server.LocalServerPort;
import org.springframework.http.HttpEntity;

import pl.pbarczewski.entity.Credit;
import pl.pbarczewski.entity.Customer;
import pl.pbarczewski.entity.Product;
import pl.pbarczewski.repository.CreditRepository;
import pl.pbarczewski.service.CreditService;
import pl.pbarczewski.wrapper.Entities;

@Testcontainers
@DirtiesContext(classMode = ClassMode.BEFORE_EACH_TEST_METHOD)
@SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT)
public class CreditControllerTest {

	private Credit firstCredit;
	private Credit secondCredit;
	
	@Autowired
	private CreditController creditController;
	
	@Autowired
	private CreditService creditService;
	
	@Autowired
	private CreditRepository creditRepository;
	
	@BeforeEach
	void init() {
		firstCredit = new Credit("New Credit");
		firstCredit.setCreditId(12345);
		secondCredit = new Credit("Second Credit");
		secondCredit.setCreditId(54321);
		
	}
	
	@LocalServerPort
	private int port;
	
	@Autowired
	private TestRestTemplate restTemplate;
	
	@Container
	private static MySQLContainer mysqlContainer = new MySQLContainer("mysql:latest");
	
	@DynamicPropertySource
	public static void ovverideProps(DynamicPropertyRegistry registry) {
		registry.add("spring.datasource.url", mysqlContainer::getJdbcUrl);
		registry.add("spring.datasource.username", mysqlContainer::getUsername);
		registry.add("spring.datasource.password", mysqlContainer::getPassword);
	}
	
	@Test
	public void product_list_should_be_empty_if_no_product_is_added() {
		assertThat(this.restTemplate.getForObject("http://localhost:"+port +"/credits", Credit[].class)).isEmpty();
	}
	
	@Test
	public void product_list_should_be_empty_if_no_product_is_added1() {
		//given
		creditRepository.save(firstCredit);
		creditRepository.save(secondCredit);
		//when
		Credit[] credits = this.restTemplate.getForObject("http://localhost:"+port +"/credits", Credit[].class);
		//then
		assertEquals(credits.length, 2);
	}
	
	@Test
	public void product_list_should_be_empty_if_no_product_is_added12() throws Exception {
		//given
		Customer customer = new Customer("Jan", "Kowalski", "12345678901");
		customer.setCreditId(12345);
		firstCredit.completeCredit(customer, new Product("First Product", 100));
		creditRepository.save(firstCredit);
		creditRepository.save(secondCredit);
		//when
		Credit[] credits = this.restTemplate.getForObject("http://localhost:"+port +"/credits", Credit[].class);
		assertAll(
				() -> assertEquals(firstCredit.getCustomer(), null),
				() -> assertEquals(firstCredit.getName(), "New Credit")
				);
	}
	
	
	
	
}
